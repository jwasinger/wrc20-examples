# Test WRC20, see https://gist.github.com/axic/16158c5c88fbc7b1d09dfa8c658bc363
---
wrc20_handwritten:
  env:
    currentCoinbase: 2adc25665018aa1fe0e6bc666dac8fc2697ff9ba
    currentDifficulty: '0x020000'
    currentGasLimit: '89128960'
    currentNumber: '1'
    currentTimestamp: '1000'
    previousHash: 5e20a0453cecd065ea59c37ac63e079ee08998b6045136a8ce6635c7912ec0b6
  pre:
    0xa94f5374fce5edbc8e2a8697c15331677e6ebf0b:
      balance: '100000000000'
      code: ''
      nonce: '0'
      storage: {}
    0xeD09375DC6B20050d242d1611af97eE4A6E93CAd:
      balance: '100000000000'
      code: |
        (module
         (import "ethereum" "storageStore" (func $storageStore (param i32 i32)))
         (import "ethereum" "call"         (func $call (param i64 i32 i32 i32 i32) (result i32)))
         (import "ethereum" "returnDataCopy" (func $returnDataCopy (param i32 i32 i32)))
         (import "debug" "printStorageHex" (func $printStorageHex (param i32)))
         (import "debug" "printMemHex" (func $printMemHex (param i32 i32)))
         (memory 1)

         ;; memory looks like this
         ;; 0                   | 32          | 64                                  | 96...
         ;; address of contract | wei to send | storage key to store returned value | calldata and returndata...

         ;; address of contract to call
         (data (i32.const 0) "\b9\4f\53\74\fc\e5\ed\bc\8e\2a\86\97\c1\53\31\67\7e\6e\bf\0b")

         ;; first message to query balance
         (data (i32.const 96) "\99\93\02\1a\ed\09\37\5d\c6\b2\00\50\d2\42\d1\61\1a\f9\7e\e4\a6\e9\3c\ad")	
         ;; first return value will become
         ;;(data (i32.const 120) "\00\00\00\00\00\0f\42\40")	

         ;; second message to transfer tokens
         (data (i32.const 152) "\5d\35\9f\bd\e9\29\cf\25\44\36\3b\dc\ee\4a\97\65\15\d5\f9\77\58\ef\47\6c\00\00\00\00\00\07\a1\20")	    ;; second message returns nothing

         ;; third message (same as first)
         (data (i32.const 216) "\99\93\02\1a\ed\09\37\5d\c6\b2\00\50\d2\42\d1\61\1a\f9\7e\e4\a6\e9\3c\ad")	
         ;; third return value will become
         ;;(data (i32.const 240) "\00\00\00\00\00\07\a1\20")	

         ;; fourth message to query balance
         (data (i32.const 272) "\99\93\02\1a\e9\29\cf\25\44\36\3b\dc\ee\4a\97\65\15\d5\f9\77\58\ef\47\6c")
         ;; fourth return value will become
         ;;(data (i32.const 304) "\00\00\00\00\00\07\a1\20")	

         (export "main" (func $main))
         (export "memory" (memory 0))
         (func $main


          ;; call the precompile at address b94...f0b and send value 0 Eth
          ;;                      gas           addrOffset     valOffset      dataOffset     dataLength
          (drop (call $call (i64.const 200000) (i32.const 0) (i32.const 32) (i32.const 96) (i32.const 24)))
          ;; get return data
          ;;                     resultOffset   dataOffset    length
          (call $returnDataCopy (i32.const 120) (i32.const 0) (i32.const 8))
          ;; store result in storage
          (i32.store8 (i32.const 95) (i32.const 0))
          ;;                     pathOffset     valueOffset
          (call $storageStore (i32.const 64) (i32.const 120))
          (call $printMemHex (i32.const 120) (i32.const 32))
          (call $printStorageHex (i32.const 64))

          ;; call the precompile at address b94...f0b and send value 0 Eth
          ;;                      gas           addrOffset     valOffset      dataOffset     dataLength
          (drop (call $call (i64.const 200000) (i32.const 0) (i32.const 32) (i32.const 152) (i32.const 32)))
          ;; get return data
          ;;                     resultOffset   dataOffset    length
          (call $returnDataCopy (i32.const 184) (i32.const 0) (i32.const 0))
          ;; store result in storage
          (i32.store8 (i32.const 95) (i32.const 1))
          ;;                     pathOffset     valueOffset
          (call $storageStore (i32.const 64) (i32.const 184))
          (call $printMemHex (i32.const 184) (i32.const 32))
          (call $printStorageHex (i32.const 64))


          ;; call the precompile at address b94...f0b and send value 0 Eth
          ;;                      gas           addrOffset     valOffset      dataOffset     dataLength
          (drop (call $call (i64.const 200000) (i32.const 0) (i32.const 32) (i32.const 216) (i32.const 24)))
          ;; get return data
          ;;                     resultOffset   dataOffset    length
          (call $returnDataCopy (i32.const 240) (i32.const 0) (i32.const 8))
          ;; store result in storage
          (i32.store8 (i32.const 95) (i32.const 2))
          ;;                     pathOffset     valueOffset
          (call $storageStore (i32.const 64) (i32.const 240))
          (call $printMemHex (i32.const 240) (i32.const 32))
          (call $printStorageHex (i32.const 64))


          ;; call the precompile at address b94...f0b and send value 0 Eth
          ;;                      gas           addrOffset     valOffset      dataOffset     dataLength
          (drop (call $call (i64.const 200000) (i32.const 0) (i32.const 32) (i32.const 272) (i32.const 24)))
          ;; get return data
          ;;                     resultOffset   dataOffset    length
          (call $returnDataCopy (i32.const 304) (i32.const 0) (i32.const 8))
          ;; store result in storage
          (i32.store8 (i32.const 95) (i32.const 3))
          ;;                     pathOffset     valueOffset
          (call $storageStore (i32.const 64) (i32.const 304))
          (call $printMemHex (i32.const 304) (i32.const 32))
          (call $printStorageHex (i32.const 64))

         )
        )
      nonce: '0'
      storage: {}

    b94f5374fce5edbc8e2a8697c15331677e6ebf0b:
      balance: '100000000000'
      code: |
                (module
                 (type $0 (func (param i32 i32)))
                 (type $1 (func (result i32)))
                 (type $2 (func (param i32 i32 i32)))
                 (type $3 (func (param i32)))
                 (type $4 (func))
                 (type $5 (func (param i64) (result i64)))
                 (memory $0 1)
                 (import "ethereum" "revert" (func $fimport$0 (param i32 i32)))
                 (import "ethereum" "finish" (func $fimport$1 (param i32 i32)))
                 (import "ethereum" "getCallDataSize" (func $fimport$2 (result i32)))
                 (import "ethereum" "callDataCopy" (func $fimport$3 (param i32 i32 i32)))
                 (import "ethereum" "storageLoad" (func $fimport$4 (param i32 i32)))
                 (import "ethereum" "storageStore" (func $fimport$5 (param i32 i32)))
                 (import "ethereum" "getTxOrigin" (func $fimport$6 (param i32)))
                 (import "ethereum" "getCaller" (func $fimport$7 (param i32)))
                 (export "memory" (memory $0))
                 (export "main" (func $0))
                 (func $0 (; 8 ;) (type $4)
                  (block $label$1
                   (block $label$2
                    (br_if $label$2
                     (i32.ge_u
                      (call $fimport$2)
                      (i32.const 4)
                     )
                    )
                    (call $fimport$0
                     (i32.const 0)
                     (i32.const 0)
                    )
                    (br $label$1)
                   )
                   (call $fimport$3
                    (i32.const 0)
                    (i32.const 0)
                    (i32.const 4)
                   )
                   (block $label$3
                    (br_if $label$3
                     (i32.eqz
                      (i32.eq
                       (i32.load
                        (i32.const 0)
                       )
                       (i32.const 436376473)
                      )
                     )
                    )
                    (call $1)
                    (br $label$1)
                   )
                   (block $label$4
                    (br_if $label$4
                     (i32.eqz
                      (i32.eq
                       (i32.load
                        (i32.const 0)
                       )
                       (i32.const -1113639587)
                      )
                     )
                    )
                    (call $2)
                    (br $label$1)
                   )
                   (call $fimport$0
                    (i32.const 0)
                    (i32.const 0)
                   )
                  )
                 )
                 (func $1 (; 9 ;) (type $4)
                  (block $label$1
                   (block $label$2
                    (br_if $label$2
                     (i32.eq
                      (call $fimport$2)
                      (i32.const 24)
                     )
                    )
                    (call $fimport$0
                     (i32.const 0)
                     (i32.const 0)
                    )
                    (br $label$1)
                   )
                   (call $fimport$3
                    (i32.const 0)
                    (i32.const 4)
                    (i32.const 20)
                   )
                   (call $fimport$4
                    (i32.const 0)
                    (i32.const 32)
                   )
                   (i64.store
                    (i32.const 32)
                    (call $3
                     (i64.load
                      (i32.const 32)
                     )
                    )
                   )
                   (call $fimport$1
                    (i32.const 32)
                    (i32.const 8)
                   )
                  )
                 )
                 (func $2 (; 10 ;) (type $4)
                  (local $0 i64)
                  (local $1 i64)
                  (local $2 i64)
                  (block $label$1
                   (block $label$2
                    (br_if $label$2
                     (i32.eq
                      (call $fimport$2)
                      (i32.const 32)
                     )
                    )
                    (call $fimport$0
                     (i32.const 0)
                     (i32.const 0)
                    )
                    (br $label$1)
                   )
                   (call $fimport$7
                    (i32.const 0)
                   )
                   (call $fimport$3
                    (i32.const 32)
                    (i32.const 4)
                    (i32.const 20)
                   )
                   (call $fimport$3
                    (i32.const 64)
                    (i32.const 24)
                    (i32.const 8)
                   )
                   (set_local $0
                    (call $3
                     (i64.load
                      (i32.const 64)
                     )
                    )
                   )
                   (call $fimport$4
                    (i32.const 0)
                    (i32.const 64)
                   )
                   (set_local $1
                    (i64.load
                     (i32.const 64)
                    )
                   )
                   (call $fimport$4
                    (i32.const 32)
                    (i32.const 64)
                   )
                   (set_local $2
                    (i64.load
                     (i32.const 64)
                    )
                   )
                   (block $label$3
                    (br_if $label$3
                     (i64.le_u
                      (get_local $0)
                      (get_local $1)
                     )
                    )
                    (call $fimport$0
                     (i32.const 0)
                     (i32.const 0)
                    )
                    (br $label$1)
                   )
                   (set_local $1
                    (i64.sub
                     (get_local $1)
                     (get_local $0)
                    )
                   )
                   (set_local $2
                    (i64.add
                     (get_local $2)
                     (get_local $0)
                    )
                   )
                   (i64.store
                    (i32.const 64)
                    (get_local $1)
                   )
                   (call $fimport$5
                    (i32.const 0)
                    (i32.const 64)
                   )
                   (i64.store
                    (i32.const 64)
                    (get_local $2)
                   )
                   (call $fimport$5
                    (i32.const 32)
                    (i32.const 64)
                   )
                  )
                 )
                 (func $3 (; 11 ;) (type $5) (param $0 i64) (result i64)
                  (local $1 i64)
                  (local $2 i64)
                  (block $label$1
                   (loop $label$2
                    (br_if $label$1
                     (i64.ge_u
                      (get_local $1)
                      (i64.const 8)
                     )
                    )
                    (set_local $2
                     (i64.add
                      (i64.shl
                       (i64.shr_u
                        (i64.shl
                         (get_local $0)
                         (i64.sub
                          (i64.const 56)
                          (i64.mul
                           (get_local $1)
                           (i64.const 8)
                          )
                         )
                        )
                        (i64.const 56)
                       )
                       (i64.sub
                        (i64.const 56)
                        (i64.mul
                         (i64.const 8)
                         (get_local $1)
                        )
                       )
                      )
                      (get_local $2)
                     )
                    )
                    (set_local $1
                     (i64.add
                      (get_local $1)
                      (i64.const 1)
                     )
                    )
                    (br $label$2)
                   )
                  )
                  (get_local $2)
                 )
                )
                
      nonce: ''
      storage: {
        "0xeD09375DC6B20050d242d1611af97eE4A6E93CAd000000000000000000000000" : "0x40420f0000000000000000000000000000000000000000000000000000000000"
      }
  expect:
    - indexes:
        data: !!int -1
        gas:  !!int -1
        value: !!int -1
      network:
        - ALL
      result:
        eD09375DC6B20050d242d1611af97eE4A6E93CAd:
          storage: {
            "0x0000000000000000000000000000000000000000000000000000000000000000" : "0x00000000000f4240000000000000000000000000000000000000000000000000",
            "0x0000000000000000000000000000000000000000000000000000000000000001" : "0x0000000000000000000000000000000000000000000000000000000000000000",
            "0x0000000000000000000000000000000000000000000000000000000000000002" : "0x000000000007a120000000000000000000000000000000000000000000000000",
            "0x0000000000000000000000000000000000000000000000000000000000000003" : "0x000000000007a120000000000000000000000000000000000000000000000000"
          }
  transaction:
    data:
    - ''
    gasLimit:
    - '0x5000001'
    gasPrice: '0x01'
    nonce: '0x00'
    secretKey: 45a915e4d060149eb4365960e6a7a45f334393093061116b197e3240065ff2d8
    to: '0xeD09375DC6B20050d242d1611af97eE4A6E93CAd'
    value:
    - '0'
